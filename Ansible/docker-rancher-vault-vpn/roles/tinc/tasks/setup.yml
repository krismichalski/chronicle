---
# This sets up the original keys and copies it to a default location for later use
# /etc/tinc/{{ tinc_netname }}/rsa_key.pub and /etc/tinc/{{ tinc_netname }}/rsa_key.priv
- command: docker run --rm -v /etc/tinc/{{ tinc_netname }}:/etc/tinc jenserat/tinc:latest generate-keys 4096
  args:
    creates: "/etc/tinc/{{ tinc_netname }}/rsa_key.priv"

- file: path=/etc/tinc/{{ tinc_netname }}/hosts state=directory mode=0755 recurse=true

# Setup the main tinc.conf
- template: src=tinc.conf.j2 dest="/etc/tinc/{{ tinc_netname }}/tinc.conf" mode=0644

# # Install the static binary if available
# - unarchive: src=tinc-{{ ansible_architecture }}.tar.gz dest=/etc/tinc/ mode=0755
#   when: tinc_static_binary
# - file: src="/etc/tinc/bin/tincd" dest="/usr/local/bin/tincd" state=link
#   when: tinc_static_binary
#   ignore_errors: yes

# # Install the tinc package from repo if available
# - apt: name=tinc state=installed
#   when: not tinc_static_binary

# # Make directories to figure out the ip addresses and keys to distribute
- file: path={{ tinc_tmpdir }}/{{ tinc_netname }}/pubkeys state=directory recurse=true
  delegate_to: localhost
  run_once: true
  become: false
- file: path={{ tinc_tmpdir }}/{{ tinc_netname }}/ip state=directory recurse=true
  delegate_to: localhost
  run_once: true
  become: false
- file: path={{ tinc_tmpdir }}/{{ tinc_netname }}/current state=directory recurse=true
  delegate_to: localhost
  run_once: true
  become: false

# # Fetch the ip addresses and keys from the hosts
- fetch: src=/etc/tinc/{{ tinc_netname }}/ansible_ipaddress dest={{ tinc_tmpdir }}/{{ tinc_netname }}/ip/{{ ansible_hostname }} flat=yes
  ignore_errors: yes
- fetch: src=/etc/tinc/{{ tinc_netname }}/rsa_key.pub dest={{ tinc_tmpdir }}/{{ tinc_netname }}/pubkeys/{{ ansible_hostname }} flat=yes
  ignore_errors: yes

# Set an ipaddress for each host in set if they don't have already
- script: setip.py {{ tinc_tmpdir }}/{{ tinc_netname }}/pubkeys {{ tinc_tmpdir }}/{{ tinc_netname }}/ip {{ tinc_subnet }}
  tags: test
  register: ip_output
  become: false
  delegate_to: localhost

- template: src=host_configuration.j2 dest="{{ tinc_tmpdir }}/{{ tinc_netname }}/current/{{ ansible_hostname | regex_replace('-', '_') }}"
  delegate_to: localhost
  become: false

- template: src=tinc-up.j2 dest="/etc/tinc/{{ tinc_netname }}/tinc-up" mode=0755

- template: src=tinc-down.j2 dest="/etc/tinc/{{ tinc_netname }}/tinc-down" mode=0755

# Store the ipaddress for the host which was generated by setip.py
- copy: src="{{ tinc_tmpdir}}/{{ tinc_netname }}/ip/{{ ansible_hostname }}" dest="/etc/tinc/{{ tinc_netname }}/ansible_ipaddress"

- copy: src="{{ tinc_tmpdir }}/{{ tinc_netname }}/current/" dest="/etc/tinc/{{ tinc_netname }}/hosts/"

- name: "Build hosts file"
  lineinfile: dest=/etc/hosts regexp='.*{{ hostvars[item]['ansible_hostname'] }}.{{ tinc_netname }}$' line="{{ lookup('file', "{{ tinc_tmpdir }}/{{ tinc_netname }}/ip/{{ item }}") }} {{ hostvars[item]['ansible_hostname'] }}.{{ tinc_netname }}" state=present
  with_items: "{{ play_hosts }}"
  tags: hostsfile

# Delete the temporary directory
- file: dest="{{ tinc_tmpdir }}/{{ tinc_netname }}" state=absent
  delegate_to: localhost
  become: false
  run_once: true

# # Remove tinc binary because we use docker image
# - file: path="/usr/local/bin/tincd" state=absent
#   when: tinc_static_binary
#   ignore_errors: yes
# - file: path="/etc/tinc/bin/tincd" state=absent
#   when: tinc_static_binary
#   ignore_errors: yes
# - apt: name=tinc state=absent
#   when: not tinc_static_binary
